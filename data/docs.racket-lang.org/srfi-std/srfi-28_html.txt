Title

SRFI 28: Basic Format Strings

Author

Scott G. Miller

Status

This SRFI is currently in ``final'' status. To see an explanation of each
status that a SRFI can hold, see here. You can access the discussion on this
SRFI via the archive of the mailing list.

  • Draft: 2002/03/23-2002/05/23
  • Final: 2002/06/25

Abstract

This document specifies Format Strings, a method of interpreting a Scheme
string which contains a number of escape sequences that are replaced with other
string data according to the semantics of each sequence.

Rationale

Many Scheme systems provide access to a function called format. This function
takes as arguments a format string, an ordinary Scheme string containing zero
or more escape sequences, followed zero or more Scheme values. The procedure
processes the format string and performs string replacement on the escape
sequences according to the rules for each code. This SRFI defines a basic
version of format which should allow portable code to be written using the
function without much (if any) effort on the part of Scheme implementors.

Specification

format format-string [obj ...] -> string


    Accepts a message template (a Scheme String), and processes it, replacing
    any escape sequences in order with one or more characters, the characters
    themselves dependent on the semantics of the escape sequence encountered.

    An escape sequence is a two character sequence in the string where the
    first character is a tilde '~'. Each escape code's meaning is as follows:

      □ ~a The corresponding value is inserted into the string as if printed
        with display.
      □ ~s The corresponding value is inserted into the string as if printed
        with write.
      □ ~% A newline is inserted.
      □ ~~ A tilde '~' is inserted.

    ~a and ~s, when encountered, require a corresponding Scheme value to be
    present after the format string. The values provided as operands are used
    by the escape sequences in order. It is an error if fewer values are
    provided than escape sequences that require them.

    ~% and ~~ require no corresponding value.

Examples

(format "Hello, ~a" "World!")
; => "Hello, World!"

(format "Error, list is too short: ~s~%" '(one "two" 3))
; => "Error, list is too short: (one \"two\" 3))"

Implementation

The implementation below requires SRFI-6 (Basic string ports) and SRFI-23
(Error reporting mechanism).

(define format
  (lambda (format-string . objects)
    (let ((buffer (open-output-string)))
      (let loop ((format-list (string->list format-string))
                 (objects objects))
        (cond ((null? format-list) (get-output-string buffer))
              ((char=? (car format-list) #\~)
               (if (null? (cdr format-list))
                   (error 'format "Incomplete escape sequence")
                   (case (cadr format-list)
                     ((#\a)
                      (if (null? objects)
                          (error 'format "No value for escape sequence")
                          (begin
                            (display (car objects) buffer)
                            (loop (cddr format-list) (cdr objects)))))
                     ((#\s)
                      (if (null? objects)
                          (error 'format "No value for escape sequence")
                          (begin
                            (write (car objects) buffer)
                            (loop (cddr format-list) (cdr objects)))))
                     ((#\%)
                      (newline buffer)
                      (loop (cddr format-list) objects))
                     ((#\~)
                      (write-char #\~ buffer)
                      (loop (cddr format-list) objects))
                     (else
                      (error 'format "Unrecognized escape sequence")))))
              (else (write-char (car format-list) buffer)
                    (loop (cdr format-list) objects)))))))


Copyright

Copyright (C) Scott G. Miller (2002). All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Editor: Francisco Solsona

Author: Scott G. Miller
Last modified: Mon Apr 8 06:54:37 CDT 2002
