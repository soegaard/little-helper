▼  Extending Dr Racket
 1  Implementing Dr Racket Plugins
 2  Adding Languages to Dr Racket
 3  Creating New Kinds of Dr Racket Frames
 4  Extending the Existing Dr Racket Classes
 5  Expanding the User’s Program Text and Breaking
 6  Editor Modes
 7  Language-specific capabilities
 8  Check Syntax
 9  drracket: get/ extend
10  drracket: unit
11  drracket: language
12  drracket: language-configuration
13  drracket: debug
14  drracket: rep
15  drracket: frame
16  drracket: help-desk
17  drracket: eval
18  drracket: modes
19  drracket: module-language-tools
20  drracket: module-language
21  Documentation Utilities
22  Backwards compatibility
    Index
[...search manuals...]
  top← prev  up  next → 

5 Expanding the User’s Program Text and Breaking

Macro-expanding a program may involve arbitrary computation and requires the
setup of the correct language. To aid this, DrRacket’s tool interface provides
drracket:eval:expand-program to help. Use this method to extract the fully
expanded program text in a particular language.

Because expanding the user’s program may require DrRacket to evaluate arbitrary
code that the user wrote, tools that expand the user’s program should also
allow the user to break the expansion. To help with this, the tools interfaces
provides these methods: enable-evaluation and disable-evaluation. Since your
tool will be expanding the program text, you should be both overriding
enable-evaluation and disable-evaluation to disable your tool and calling them
to ensure that only one expansion is happening at a time.

Finally, DrRacket provides the set-breakables method. This method controls what
behavior the Break button has.

[...search manuals...]
  top← prev  up  next → 
 
