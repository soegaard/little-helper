▼  Mz Lib: Legacy Libraries
 1  mzlib/ a-signature
 2  mzlib/ a-unit
 3  mzlib/ async-channel
 4  mzlib/ awk
 5  mzlib/ class
 6  mzlib/ class100
 7  mzlib/ cm
 8  mzlib/ cm-accomplice
 9  mzlib/ cmdline
10  mzlib/ cml
11  mzlib/ compat
12  mzlib/ compile
13  mzlib/ contract
14  mzlib/ control
15  mzlib/ date
16  mzlib/ deflate
17  mzlib/ defmacro
18  mzlib/ etc
19  mzlib/ file
20  mzlib/ for
21  mzlib/ foreign
22  mzlib/ include
23  mzlib/ inflate
24  mzlib/ integer-set
25  mzlib/ kw
26  mzlib/ list
27  mzlib/ match
28  mzlib/ math
29  mzlib/ md5
30  mzlib/ os
31  mzlib/ pconvert
32  mzlib/ pconvert-prop
33  mzlib/ plt-match
34  mzlib/ port
35  mzlib/ pregexp
36  mzlib/ pretty
37  mzlib/ process
38  mzlib/ restart
39  mzlib/ runtime-path
40  mzlib/ sandbox
41  mzlib/ sendevent
42  mzlib/ serialize
43  mzlib/ shared
44  mzlib/ string
45  mzlib/ struct
46  mzlib/ stxparam
47  mzlib/ surrogate
48  mzlib/ tar
49  mzlib/ thread
50  mzlib/ trace
51  mzlib/ traceld
52  mzlib/ trait
53  mzlib/ transcr
54  mzlib/ unit
55  mzlib/ unit-exptime
56  mzlib/ unit200
57  mzlib/ unitsig200
58  mzlib/ zip
    Bibliography
    Index
On this page:
awk
match: start
match: end
match: substring
regexp-exec
[...search manuals...]
  top← prev  up  next → 

 (require mzlib/awk)

(awk next-record-expr
     (record field-id ...)
     maybe-counter
     ((state-variable init-expr) ...)
     maybe-continue
  clause ...)
 
  maybe-counter   =  
                  |   id
                       
 maybe-continue   =  
                  |   id
                       
         clause   =   (test body ...+)
                  |   (test => procedure-expr)
                  |   (/ regexp-str / (id-or-false ...+) body ...+)
                  |   (range excl-start-test excl-stop-test body ...+)
                  |   (:range incl-start-test excl-stop-test body ...+)
                  |   (range: excl-start-test incl-stop-test body ...+)
                  |   (:range: incl-start-test incl-stop-test body ...+)
                  |   (else body ...+)
                  |   (after body ...+)
                       
           test   =   integer
                  |   regexp-string
                  |   expr
                       
excl-start-test   =   test
                       
 excl-stop-test   =   test
                       
incl-start-test   =   test
                       
 incl-stop-test   =   test
                       
    id-or-false   =   id
                  |   #f
The awk macro from Scsh [Shivers06]. In addition to awk, the Scsh-compatible
procedures match:start, match:end, match:substring, and regexp-exec are
defined. These match: procedures must be used to extract match information in a
regular expression clause when using the => form.

(match:start rec [which]) → exact-nonnegative-integer?
  rec : ....
  which : exact-nonnegative-integer? = 0
(match:end rec [which]) → exact-nonnegative-integer?
  rec : ....
  which : exact-nonnegative-integer? = 0
(match:substring rec [which]) → string?
  rec : ....
  which : exact-nonnegative-integer? = 0
Extracts a start position, end position, or substring corresponding to a match.
The first argument is the value supplied to the procedure after => in a awk
clause or the result of regexp-exec.

(regexp-exec re s) → (or/c .... false/c)
  re : (or/c string? regexp?)
  s : string?
Matches a regexp to a string, returning a record compatible with match:start,
etc.

[...search manuals...]
  top← prev  up  next → 
 
