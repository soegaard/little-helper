▼  Unstable: May Change Without Warning
 1  Guidelines for developing unstable libraries
 2  Automata: Compiling State Machines
 3  Bytes
 4  Contracts
 5  Contracts for macro subexpressions
 6  Contracts for struct type properties
 7  Debugging
 8  Definitions
 9  Dictionaries
10  Exceptions
11  Filesystem
12  Find
13  Finding Mutated Variables
14  Functions
15  Generics
16  Hash Tables
17  Interface-Oriented Programming for Classes
18  Lists
19  Logging
20  Mark Parameters
21  Match
22  Net
23  Path
24  Ports
25  Pretty-Printing
26  Requiring Modules
27  Sequences
28  Strings
29  Structs
30  Syntax
31  Temporal Contracts: Explicit Contract Monitors
32  GUI libraries
On this page:
hash-union
hash-union!
Version: 5.1.2
[...search manuals...]
  top← prev  up  next → 

16 Hash Tables

Carl Eastlund <cce@racket-lang.org>

 (require unstable/hash)

This library is unstable; compatibility will not be maintained. See Unstable:
May Change Without Warning for more information.

This module provides tools for manipulating hash tables.

(hash-union    h0                           
               h ...                        
             [ #:combine combine            
               #:combine/key combine/key])  
 → (and/c hash? hash-can-functional-set?)
  h0 : (and/c hash? hash-can-functional-set?)
  h : hash?
   combine   :   (-> any/c any/c any/c)
             =   (lambda _ (error 'hash-union ...))
   combine/key   :   (-> any/c any/c any/c any/c)
                 =   (lambda (k a b) (combine a b))
Computes the union of h0 with each hash table h by functional update, adding
each element of each h to h0 in turn. For each key k and value v, if a mapping
from k to some value v0 already exists, it is replaced with a mapping from k to
(combine/key k v0 v).

Examples:

    > (hash-union (make-immutable-hash '([1 . one])) (make-immutable-hash '
    ([2 . two])) (make-immutable-hash '([3 . three])))
    '#hash((1 . one) (2 . two) (3 . three))

    > (hash-union (make-immutable-hash '([1    one uno]  [2    two dos]))
                  (make-immutable-hash '([1    ein une]  [2    zwei deux]))
                  #:combine/key (lambda (k v1 v2) (append v1 v2)))
    '#hash((1 . (one uno ein une)) (2 . (two dos zwei deux)))



(hash-union!    h0                                 
                h ...                              
              [ #:combine combine                  
                #:combine/key combine/key])   →   void?
  h0 : (and/c hash? hash-mutable?)
  h : hash?
   combine   :   (-> any/c any/c any/c)
             =   (lambda _ (error 'hash-union ...))
   combine/key   :   (-> any/c any/c any/c any/c)
                 =   (lambda (k a b) (combine a b))
Computes the union of h0 with each hash table h by mutable update, adding each
element of each h to h0 in turn. For each key k and value v, if a mapping from
k to some value v0 already exists, it is replaced with a mapping from k to
(combine/key k v0 v).

Examples:

    (define h (make-hash))
    > h
    '#hash()

    > (hash-union! h (make-immutable-hash '([1    one uno]  [2    two dos])))
    > h
    '#hash((1 . (one uno)) (2 . (two dos)))

    > (hash-union! h
                   (make-immutable-hash '([1    ein une]  [2    zwei deux]))
                   #:combine/key (lambda (k v1 v2) (append v1 v2)))
    > h
    '#hash((1 . (one uno ein une)) (2 . (two dos zwei deux)))



[...search manuals...]
  top← prev  up  next → 
 
