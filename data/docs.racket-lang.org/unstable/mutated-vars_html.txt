▼  Unstable: May Change Without Warning
 1  Guidelines for developing unstable libraries
 2  Automata: Compiling State Machines
 3  Bytes
 4  Contracts
 5  Contracts for macro subexpressions
 6  Contracts for struct type properties
 7  Debugging
 8  Definitions
 9  Dictionaries
10  Exceptions
11  Filesystem
12  Find
13  Finding Mutated Variables
14  Functions
15  Generics
16  Hash Tables
17  Interface-Oriented Programming for Classes
18  Lists
19  Logging
20  Mark Parameters
21  Match
22  Net
23  Path
24  Ports
25  Pretty-Printing
26  Requiring Modules
27  Sequences
28  Strings
29  Structs
30  Syntax
31  Temporal Contracts: Explicit Contract Monitors
32  GUI libraries
On this page:
find-mutated-vars
Version: 5.1.2
[...search manuals...]
  top← prev  up  next → 

13 Finding Mutated Variables

Sam Tobin-Hochstadt <samth@ccs.neu.edu>

 (require unstable/mutated-vars)

This library is unstable; compatibility will not be maintained. See Unstable:
May Change Without Warning for more information.

(find-mutated-vars stx [dict]) → dict?
  stx : syntax?
  dict : dict? = (make-immutable-free-id-table)
Traverses stx, which should be module-level-form in the sense of the grammar
for fully-expanded forms, and records all of the variables that are mutated.
Each mutated variable is added to dict, mapped to #t. If dict is mutable, as
determined by dict-mutable?, then the table is updated destructively.
Otherwise, the table is updated functionally.

Examples:

    > (define t (find-mutated-vars #'(begin (set! var 'foo) 'bar)))
    > (dict-ref t #'var #f)
    #t

    > (dict-ref t #'other-var #f)
    #f

    > (define tbl (make-free-id-table))
    > (find-mutated-vars #'(begin (set! var 'foo) 'bar) tbl)
    #<mutable-free-id-table>

    > (dict-ref tbl #'var #f)
    #t


}

[...search manuals...]
  top← prev  up  next → 
 
