▼  Unstable: May Change Without Warning
 1  Guidelines for developing unstable libraries
 2  Automata: Compiling State Machines
 3  Bytes
 4  Contracts
 5  Contracts for macro subexpressions
 6  Contracts for struct type properties
 7  Debugging
 8  Definitions
 9  Dictionaries
10  Exceptions
11  Filesystem
12  Find
13  Finding Mutated Variables
14  Functions
15  Generics
16  Hash Tables
17  Interface-Oriented Programming for Classes
18  Lists
19  Logging
20  Mark Parameters
21  Match
22  Net
23  Path
24  Ports
25  Pretty-Printing
26  Requiring Modules
27  Sequences
28  Strings
29  Structs
30  Syntax
31  Temporal Contracts: Explicit Contract Monitors
32  GUI libraries
On this page:
in-syntax
in-pairs
in-sequence-forever
sequence-lift
Version: 5.1.2
[...search manuals...]
  top← prev  up  next → 

27 Sequences

Sam Tobin-Hochstadt <samth@ccs.neu.edu>

 (require unstable/sequence)

This library is unstable; compatibility will not be maintained. See Unstable:
May Change Without Warning for more information.

(in-syntax stx) → sequence?
  stx : syntax?
Produces a sequence equivalent to (syntax->list lst).
An in-syntax application can provide better performance for syntax iteration
when it appears directly in a for clause.

Example:

    > (for/list ([x (in-syntax #'(1 2 3))])
        x)
    '(#<syntax:2:0 1> #<syntax:2:0 2> #<syntax:2:0 3>)



(in-pairs seq) → sequence?
  seq : sequence?
Produces a sequence equivalent to (in-parallel (sequence-lift car seq) (
sequence-lift cdr seq)).

(in-sequence-forever seq val) → sequence?
  seq : sequence?
  val : any/c
Produces a sequence whose values are the elements of seq, followed by val
repeated.

(sequence-lift f seq) → sequence?
  f : procedure?
  seq : sequence?
Produces the sequence of f applied to each element of seq.
Example:

    > (for/list ([x (sequence-lift add1 (in-range 10))])
        x)
    '(1 2 3 4 5 6 7 8 9 10)



[...search manuals...]
  top← prev  up  next → 
 
