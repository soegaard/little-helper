▼  Unstable: May Change Without Warning
 1  Guidelines for developing unstable libraries
 2  Automata: Compiling State Machines
 3  Bytes
 4  Contracts
 5  Contracts for macro subexpressions
 6  Contracts for struct type properties
 7  Debugging
 8  Definitions
 9  Dictionaries
10  Exceptions
11  Filesystem
12  Find
13  Finding Mutated Variables
14  Functions
15  Generics
16  Hash Tables
17  Interface-Oriented Programming for Classes
18  Lists
19  Logging
20  Mark Parameters
21  Match
22  Net
23  Path
24  Ports
25  Pretty-Printing
26  Requiring Modules
27  Sequences
28  Strings
29  Structs
30  Syntax
31  Temporal Contracts: Explicit Contract Monitors
32  GUI libraries
On this page:
wrap-expr/ c
Version: 5.1.2
[...search manuals...]
  top← prev  up  next → 

5 Contracts for macro subexpressions

Ryan Culpepper <ryanc@racket-lang.org>

This library provides a procedure wrap-expr/c for applying contracts to macro
subexpressions.

 (require unstable/wrapc)

This library is unstable; compatibility will not be maintained. See Unstable:
May Change Without Warning for more information.

(wrap-expr/c    contract-expr               
                expr                        
              [ #:positive pos-blame        
                #:negative neg-blame        
                #:name expr-name            
                #:macro macro-name          
                #:context context])    →   syntax?
  contract-expr : syntax?
  expr : syntax?
   pos-blame   :   (or/c syntax? string? module-path-index?
                         'from-macro 'use-site 'unknown)
               =   'use-site
   neg-blame   :   (or/c syntax? string? module-path-index?
                         'from-macro 'use-site 'unknown)
               =   'from-macro
  expr-name : (or/c identifier? symbol? string? #f) = #f
  macro-name : (or/c identifier? symbol? string? #f) = #f
  context : (or/c syntax? #f) = (current-syntax-context)
Returns a syntax object representing an expression that applies the contract
represented by contract-expr to the value produced by expr.

The other arguments have the same meaning as for expr/c.

Examples:

    > (define-syntax (myparameterize1 stx)
        (syntax-case stx ()
          [(_ ((p v)) body)
           (with-syntax ([cp (wrap-expr/c
                              #'parameter? #'p
                              #:name "the parameter argument"
                              #:context stx)])
             #'(parameterize ((cp v)) body))]))
    > (myparameterize1 ((current-input-port
                         (open-input-string "(1 2 3)")))
        (read))
    '(1 2 3)

    > (myparameterize1 (('whoops 'something))
        'whatever)
    the parameter argument of myparameterize1: self-contract

    violation, expected <parameter?>, given: 'whoops

      contract from top-level, blaming top-level

      contract: parameter?

            at: eval:4.0

    > (module mod racket
        (require (for-syntax unstable/wrapc))
        (define-syntax (app stx)
          (syntax-case stx ()
            [(app f arg)
             (with-syntax ([cf (wrap-expr/c
                                #'(-> number? number?)
                                #'f
                                #:name "the function argument"
                                #:context stx)])
               #'(cf arg))]))
        (provide app))
    > (require 'mod)
    > (app add1 5)
    6

    > (app add1 'apple)
    the function argument of app: contract violation, expected

    <number?>, given: 'apple

      contract from top-level, blaming (quote mod)

      contract: (-> number? number?)

            at: eval:8.0

    > (app (lambda (x) 'pear) 5)
    the function argument of app: self-contract violation,

    expected <number?>, given: 'pear

      contract from top-level, blaming top-level

      contract: (-> number? number?)

            at: eval:9.0



[...search manuals...]
  top← prev  up  next → 
 
