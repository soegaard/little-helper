►  Syntax: Meta-Programming Helpers
1  Syntax Object Helpers
2  Module-Processing Helpers
3  Macro Transformer Helpers
4  Reader Helpers
5  Non-Module Compilation And Expansion
6  Trusting Standard Recertifying Transformers
7  Attaching Documentation to Exports
8  Parsing and specifying syntax
9  Source Locations
   Index
▼ 8  Parsing and specifying syntax
 8.1  Introduction
 8.2  Examples
 8.3  Parsing syntax
 8.4  Specifying syntax with syntax classes
 8.5  Syntax patterns
 8.6  Defining simple macros
 8.7  Literal sets and Conventions
 8.8  Library syntax classes and literal sets
 8.9  Debugging and inspection tools
8.10  Experimental
On this page:
define-simple-macro
[...search manuals...]
  top← prev  up  next → 

8.6 Defining simple macros

 (require syntax/parse/define)

(define-simple-macro (macro-id . pattern) pattern-directive ...
  template)
Defines a macro named macro-id; equivalent to the following:

    (define-syntax (macro-id stx)
      (syntax-parse stx
        [(macro-id . pattern) pattern-directive ... #'template]))

Examples:

    > (define-simple-macro (fn x:id rhs:expr) (lambda (x) rhs))
    > ((fn x x) 17)
    17

    > (fn 1 2)
    fn: expected identifier at: 1

    > (define-simple-macro (fn2 x y rhs)
        #:declare x id
        #:declare y id
        #:declare rhs expr
        (lambda (x y) rhs))
    > ((fn2 a b (+ a b)) 3 4)
    7

    > (fn2 a #:b 'c)
    fn2: expected identifier at: #:b



[...search manuals...]
  top← prev  up  next → 
 
