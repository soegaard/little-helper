►  The Racket Guide
 1  Welcome to Racket
 2  Racket Essentials
 3  Built-In Datatypes
 4  Expressions and Definitions
 5  Programmer-Defined Datatypes
 6  Modules
 7  Contracts
 8  Input and Output
 9  Regular Expressions
10  Exceptions and Control
11  Iterations and Comprehensions
12  Pattern Matching
13  Classes and Objects
14  Units (Components)
15  Reflection and Dynamic Evaluation
16  Macros
17  Creating Languages
18  Performance
19  Running and Creating Executables
20  Compilation and Configuration
21  More Libraries
22  Dialects of Racket and Scheme
    Bibliography
    Index
▼ 22  Dialects of Racket and Scheme
22.1  More Rackets
22.2  Standards
22.3  Teaching
[...search manuals...]
  top← prev  up  next → 

22 Dialects of Racket and Scheme

We use “Racket” to refer to a specific dialect of the Lisp language, and one
that is based on the Scheme branch of the Lisp family. Despite Racket’s
similarly to Scheme, the #lang prefix on modules is a particular feature of
Racket, and programs that start with #lang are unlikely to run in other
implementations of Scheme. At the same time, programs that do not start with #
lang do not work with the default mode of most Racket tools.

“Racket” is not, however, the only dialect of Lisp that is supported by Racket
tools. On the contrary, Racket tools are designed to support multiple dialects
of Lisp and even multiple languages, which allows the Racket tool suite to
serve multiple communities. Racket also gives programmers and researchers the
tools they need to explore and create new languages.

    22.1 More Rackets

    22.2 Standards

      22.2.1 R5RS

      22.2.2 R6RS

    22.3 Teaching

[...search manuals...]
  top← prev  up  next → 
 
