►  The Racket Reference
 1  Language Model
 2  Syntactic Forms
 3  Datatypes
 4  Structures
 5  Classes and Objects
 6  Units
 7  Contracts
 8  Pattern Matching
 9  Control Flow
10  Concurrency and Parallelism
11  Macros
12  Input and Output
13  Reflection and Security
14  Operating System
15  Memory Management
16  Unsafe Operations
17  Running Racket
    Bibliography
    Index
▼ 2  Syntactic Forms
 2.1  Modules: module, ...
 2.2  Importing and Exporting: require and provide
 2.3  Literals: quote and #%datum
 2.4  Expression Wrapper: #%expression
 2.5  Variable References and #%top
 2.6  Locations: #%variable-reference
 2.7  Procedure Applications and #%app
 2.8  Procedure Expressions: lambda and case-lambda
 2.9  Local Binding: let, let*, letrec, ...
2.10  Local Definitions: local
2.11  Constructing Graphs: shared
2.12  Conditionals: if, cond, and, and or
2.13  Dispatch: case
2.14  Definitions: define, define-syntax, ...
2.15  Sequencing: begin, begin0, and begin-for-syntax
2.16  Guarded Evaluation: when and unless
2.17  Assignment: set! and set!-values
2.18  Iterations and Comprehensions: for, for/ list, ...
2.19  Continuation Marks: with-continuation-mark
2.20  Quasiquoting: quasiquote, unquote, and unquote-splicing
2.21  Syntax Quoting: quote-syntax
2.22  Interaction Wrapper: #%top-interaction
2.23  Limiting Scope: define-package, open-package, ...
2.24  Blocks: block
2.25  Internal-Definition Limiting: #%stratified-body
On this page:
block
[...search manuals...]
  top← prev  up  next → 

2.24 Blocks: block

 (require racket/block)
The bindings documented in this section are provided by the racket/block
library, not racket/base or racket.

(block defn-or-expr ...)
Supports a mixture of expressions and mutually recursive definitions, as in a
module body. Unlike an internal-definition context, the last defn-or-expr need
not be an expression.

The result of the block form is the result of the last defn-or-expr if it is an
expression, #<void> otherwise. If no defn-or-expr is provided (after flattening
begin forms), the result is #<void>.

The final defn-or-expr is executed in tail position, if it is an expression.

Examples:

    > (define (f x)
        (block
          (define y (add1 x))
          (displayln y)
          (define z (* 2 y))
          (+ 3 z)))
    > (f 12)
    13

    29



[...search manuals...]
  top← prev  up  next → 
 
