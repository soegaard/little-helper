►  The Racket Reference
 1  Language Model
 2  Syntactic Forms
 3  Datatypes
 4  Structures
 5  Classes and Objects
 6  Units
 7  Contracts
 8  Pattern Matching
 9  Control Flow
10  Concurrency and Parallelism
11  Macros
12  Input and Output
13  Reflection and Security
14  Operating System
15  Memory Management
16  Unsafe Operations
17  Running Racket
    Bibliography
    Index
▼ 13  Reflection and Security
 13.1  Namespaces
 13.2  Evaluation and Compilation
 13.3  The racket/ load Language
 13.4  Module Names and Loading
 13.5  Impersonators and Chaperones
 13.6  Security Guards
 13.7  Custodians
 13.8  Thread Groups
 13.9  Structure Inspectors
13.10  Code Inspectors
13.11  Sandboxed Evaluation
[...search manuals...]
  top← prev  up  next → 

13.3 The racket/load Language

 #lang racket/load

The racket/load language supports evaluation where each top-level form in the
module body is separately passed to eval in the same way as for load.

The namespace for evaluation shares the module registry with the racket/load
module instance, but it has a separate top-level environment, and it is
initialized with the bindings of racket. A single namespace is created for each
instance of the racket/load module (i.e., multiple modules using the racket/
load language share a namespace). The racket/load library exports only #
%module-begin and #%top-interaction forms that effectively swap in the
evaluation namespace and call eval.

For example, the body of a module using racket/load can include module forms,
so that running the following module prints 5:

    #lang racket/load
     
    (module m racket/base
      (provide x)
      (define x 5))
     
    (module n racket/base
      (require 'm)
      (display x))
     
    (require 'n)

Definitions in a module using racket/load are evaluated in the current
namespace, which means that load and eval can see the definitions. For example,
running the following module prints 6:

    #lang racket/load
     
    (define x 6)
    (display (eval 'x))

Since all forms within a racket/load module are evaluated in the top level,
bindings cannot be exported from the module using provide. Similarly, since
evaluation of the module-body forms is inherently dynamic, compilation of the
module provides essentially no benefit. For these reasons, use racket/load for
interactive exploration of top-level forms only, and not for constructing
larger programs.

[...search manuals...]
  top← prev  up  next → 
 
