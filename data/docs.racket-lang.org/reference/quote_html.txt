►  The Racket Reference
 1  Language Model
 2  Syntactic Forms
 3  Datatypes
 4  Structures
 5  Classes and Objects
 6  Units
 7  Contracts
 8  Pattern Matching
 9  Control Flow
10  Concurrency and Parallelism
11  Macros
12  Input and Output
13  Reflection and Security
14  Operating System
15  Memory Management
16  Unsafe Operations
17  Running Racket
    Bibliography
    Index
▼ 2  Syntactic Forms
 2.1  Modules: module, ...
 2.2  Importing and Exporting: require and provide
 2.3  Literals: quote and #%datum
 2.4  Expression Wrapper: #%expression
 2.5  Variable References and #%top
 2.6  Locations: #%variable-reference
 2.7  Procedure Applications and #%app
 2.8  Procedure Expressions: lambda and case-lambda
 2.9  Local Binding: let, let*, letrec, ...
2.10  Local Definitions: local
2.11  Constructing Graphs: shared
2.12  Conditionals: if, cond, and, and or
2.13  Dispatch: case
2.14  Definitions: define, define-syntax, ...
2.15  Sequencing: begin, begin0, and begin-for-syntax
2.16  Guarded Evaluation: when and unless
2.17  Assignment: set! and set!-values
2.18  Iterations and Comprehensions: for, for/ list, ...
2.19  Continuation Marks: with-continuation-mark
2.20  Quasiquoting: quasiquote, unquote, and unquote-splicing
2.21  Syntax Quoting: quote-syntax
2.22  Interaction Wrapper: #%top-interaction
2.23  Limiting Scope: define-package, open-package, ...
2.24  Blocks: block
2.25  Internal-Definition Limiting: #%stratified-body
On this page:
quote
#%datum
[...search manuals...]
  top← prev  up  next → 

2.3 Literals: quote and #%datum

Many forms are implicitly quoted (via #%datum) as literals. See Expansion Steps
for more information.

            +Quoting: quote and ’ in The Racket Guide introduces quote.

(quote datum)
Produces a constant value corresponding to datum (i.e., the representation of
the program fragment) without its lexical information, source location, etc.
Quoted pairs, vectors, and boxes are immutable.

Examples:

    > (quote x)
    'x

    > (quote (+ 1 2))
    '(+ 1 2)

    > (+ 1 2)
    3



(#%datum . datum)
Expands to (quote datum), as long as datum is not a keyword. If datum is a
keyword, a syntax error is reported.

See also Expansion Steps for information on how the expander introduces #%datum
identifiers.

Examples:

    > (#%datum . 10)
    10

    > (#%datum . x)
    'x

    > (#%datum . #:x)
    eval:494:0: #%datum: keyword used as an expression in: #:x



[...search manuals...]
  top← prev  up  next → 
 
