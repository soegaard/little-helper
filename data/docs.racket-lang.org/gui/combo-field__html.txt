►  The Racket Graphical Interface Toolkit
 1  Windowing
 2  Windowing Classes
 3  Windowing Functions
 4  Editors
 5  Snip and Style Classes
 6  Editor Classes
 7  Editor Functions
 8  WXME Decoding
 9  Preferences
10  Dynamic Loading
11  Startup Actions
12  Platform Dependencies
    Index
▼ 2  Windowing Classes
 2.1  area<%>
 2.2  area-container<%>
 2.3  area-container-window<%>
 2.4  button%
 2.5  canvas<%>
 2.6  canvas%
 2.7  check-box%
 2.8  checkable-menu-item%
 2.9  choice%
2.10  clipboard-client%
2.11  clipboard<%>
2.12  combo-field%
2.13  control<%>
2.14  column-control-event%
2.15  control-event%
2.16  cursor%
2.17  dialog%
2.18  event%
2.19  frame%
2.20  gauge%
2.21  group-box-panel%
2.22  grow-box-spacer-pane%
2.23  horizontal-pane%
2.24  horizontal-panel%
2.25  key-event%
2.26  labelled-menu-item<%>
2.27  list-box%
2.28  list-control<%>
2.29  menu%
2.30  menu-bar%
2.31  menu-item<%>
2.32  menu-item%
2.33  menu-item-container<%>
2.34  message%
2.35  mouse-event%
2.36  pane%
2.37  panel%
2.38  popup-menu%
2.39  printer-dc%
2.40  radio-box%
2.41  selectable-menu-item<%>
2.42  separator-menu-item%
2.43  scroll-event%
2.44  slider%
2.45  subarea<%>
2.46  subwindow<%>
2.47  tab-panel%
2.48  text-field%
2.49  timer%
2.50  top-level-window<%>
2.51  vertical-pane%
2.52  vertical-panel%
2.53  window<%>
On this page:
append
get-menu
on-popup
Inherited methods:
from text-field%
get-editor
get-field-background
get-value
set-field-background
set-value
from control<%>
command
from subwindow<%>
reparent
from window<%>
accept-drop-files
client->screen
enable
focus
get-client-handle
get-client-size
get-cursor
get-handle
get-height
get-label
get-plain-label
get-size
get-width
get-x
get-y
has-focus?
is-enabled?
is-shown?
on-drop-file
on-focus
on-move
on-size
on-subwindow-char
on-subwindow-event
on-superwindow-enable
on-superwindow-show
popup-menu
refresh
screen->client
set-cursor
set-label
show
from area<%>
get-graphical-min-size
get-parent
get-top-level-window
min-height
min-width
stretchable-height
stretchable-width
from subarea<%>
horiz-margin
vert-margin
[...search manuals...]
  top← prev  up  next → 

combo-field% : class?
  superclass: text-field%

A combo-field% object is a text-field% object that also resembles a choice%
object, because it has a small popup button to the right of the text field.
Clicking the button pops up a menu, and selecting a menu item typically copies
the item into the text field.

(new combo-field%    [label label]                              
                     [choices choices]                          
                     [parent parent]                            
                   [ [callback callback]                        
                     [init-value init-value]                    
                     [style style]                              
                     [font font]                                
                     [enabled enabled]                          
                     [vert-margin vert-margin]                  
                     [horiz-margin horiz-margin]                
                     [min-width min-width]                      
                     [min-height min-height]                    
                     [stretchable-width stretchable-width]      
                     [stretchable-height stretchable-height]])  
 → (is-a?/c combo-field%)
  label : (or/c label-string? false/c)
  choices : (listof label-string?)
   parent   :   (or/c (is-a?/c frame%) (is-a?/c dialog%)
                      (is-a?/c panel%) (is-a?/c pane%))
   callback   :   ((is-a?/c combo-field%) (is-a?/c control-event%) . -> . any)
              =   (lambda (c e) (void))
  init-value : string = ""
   style   :   (listof (one-of/c 'horizontal-label 'vertical-label
                                 'deleted))
           =   null
  font : (is-a?/c font%) = normal-control-font
  enabled : any/c = #t
  vert-margin : (integer-in 0 1000) = 2
  horiz-margin : (integer-in 0 1000) = 2
  min-width : (integer-in 0 10000) = graphical-minimum-width
  min-height : (integer-in 0 10000) = graphical-minimum-height
  stretchable-width : any/c = #t
  stretchable-height : any/c = #f
If label is not #f, it is used as the combo label. Otherwise, the combo does
not display its label.

If & occurs in label, it is specially parsed as for button%.

The choices list specifies the initial list of items for the combo’s popup
menu. The append method adds a new item to the menu with a callback to install
the appended item into the combo’s text field. The get-menu method returns a
menu that can be changed to adjust the content and actions of the combo’s menu.

The callback procedure is called when the user changes the text in the combo or
presses the Enter key (and Enter is not handled by the combo’s frame or dialog;
see on-traverse-char in top-level-window<%> ). If the user presses Enter, the
type of event passed to the callback is 'text-field-enter, otherwise it is 
'text-field.

If init-value is not "", the minimum width of the text item is made wide enough
to show init-value. Otherwise, a built-in default width is selected.

If style includes 'vertical-label, then the combo is created with a label above
the control; if style does not include 'vertical-label (and optionally includes
'horizontal-label), then the label is created to the left of the combo. If
style includes 'deleted, then the combo is created as hidden, and it does not
affect its parent’s geometry; the combo can be made active later by calling
parent’s add-child method..

The font argument determines the font for the control. For information about
the enabled argument, see window<%>. For information about the horiz-margin and
vert-margin arguments, see subarea<%>. For information about the min-width,
min-height, stretchable-width, and stretchable-height arguments, see area<%>.

(send a-combo-field append l) → void?
  l : label-string?
Adds a new item to the combo’s popup menu. The given label is used for the
item’s name, and the item’s callback installs the label into the combo’s text
field.

(send a-combo-field get-menu) → (is-a?/c popup-menu%)
Returns a popup-menu% that is effectively copied into the combo’s popup menu
when the combo is clicked. Only the labels can callbacks of the menu’s items
are used; the enable state, submenus, or separators are ignored.

(send a-combo-field on-popup event) → void?
  event : (is-a?/c control-event%)
Specification: Called when the user clicks the combo’s popup button. Override
this method to adjust the content of the combo menu on demand.

Default implementation: Does nothing.

[...search manuals...]
  top← prev  up  next → 
 
