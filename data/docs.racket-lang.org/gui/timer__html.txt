►  The Racket Graphical Interface Toolkit
 1  Windowing
 2  Windowing Classes
 3  Windowing Functions
 4  Editors
 5  Snip and Style Classes
 6  Editor Classes
 7  Editor Functions
 8  WXME Decoding
 9  Preferences
10  Dynamic Loading
11  Startup Actions
12  Platform Dependencies
    Index
▼ 2  Windowing Classes
 2.1  area<%>
 2.2  area-container<%>
 2.3  area-container-window<%>
 2.4  button%
 2.5  canvas<%>
 2.6  canvas%
 2.7  check-box%
 2.8  checkable-menu-item%
 2.9  choice%
2.10  clipboard-client%
2.11  clipboard<%>
2.12  combo-field%
2.13  control<%>
2.14  column-control-event%
2.15  control-event%
2.16  cursor%
2.17  dialog%
2.18  event%
2.19  frame%
2.20  gauge%
2.21  group-box-panel%
2.22  grow-box-spacer-pane%
2.23  horizontal-pane%
2.24  horizontal-panel%
2.25  key-event%
2.26  labelled-menu-item<%>
2.27  list-box%
2.28  list-control<%>
2.29  menu%
2.30  menu-bar%
2.31  menu-item<%>
2.32  menu-item%
2.33  menu-item-container<%>
2.34  message%
2.35  mouse-event%
2.36  pane%
2.37  panel%
2.38  popup-menu%
2.39  printer-dc%
2.40  radio-box%
2.41  selectable-menu-item<%>
2.42  separator-menu-item%
2.43  scroll-event%
2.44  slider%
2.45  subarea<%>
2.46  subwindow<%>
2.47  tab-panel%
2.48  text-field%
2.49  timer%
2.50  top-level-window<%>
2.51  vertical-pane%
2.52  vertical-panel%
2.53  window<%>
On this page:
interval
notify
start
stop
[...search manuals...]
  top← prev  up  next → 

timer% : class?
  superclass: object%

A timer% object encapsulates an event-based alarm. To use a timer, either
instantiate it with a timer-callback thunk to perform the alarm-based action,
to derive a new class and override the notify method to perform the alarm-based
action. Start a timer with start and stop it with stop. Supplying an initial
interval (in milliseconds) when creating a timer also starts the timer.

Timers have a relatively high priority in the event queue. Thus, if the timer
delay is set low enough, repeated notification for a timer can preempt user
activities (which might be directed at stopping the timer). For timers with
relatively short delays, call yield within the notify procedure to allow
guaranteed event processing.

See Event Dispatching and Eventspaces for more information about event
priorities.

(new timer%  [ [notify-callback notify-callback]  
               [interval interval]                
               [just-once? just-once?]])          
 → (is-a?/c timer%)
  notify-callback : (-> any) = void
  interval : (or/c (integer-in 0 1000000000) false/c) = #f
  just-once? : any/c = #f
The notify-callback thunk is called by the default notify method when the timer
expires.

If interval is #f (the default), the timer is not started; in that case, start
must be called explicitly. If interval is a number (in milliseconds), then
start is called with interval and just-once?.

(send a-timer interval) → (integer-in 0 1000000000)
Returns the number of milliseconds between each timer expiration (when the
timer is running).

(send a-timer notify) → void?
Specification: Called (on an event boundary) when the timer’s alarm expires.

Default implementation: Calls the notify-callback procedure that was provided
when the object was created.

(send a-timer start msec [just-once?]) → void?
  msec : (integer-in 0 1000000000)
  just-once? : any/c = #f
Starts (or restarts) the timer. If the timer is already running, its alarm time
is not changed.

The timer’s alarm expires after msec milliseconds, at which point notify is
called (on an event boundary). If just-once? is #f, the timer expires every
msec milliseconds until the timer is explicitly stopped. (More precisely, the
timer expires msec milliseconds after notify returns each time.) Otherwise, the
timer expires only once.

(send a-timer stop) → void?
Stops the timer. A stopped timer never calls notify. If the timer has expired
but the call to notify has not yet been dispatched, the call is removed from
the event queue.

[...search manuals...]
  top← prev  up  next → 
 
