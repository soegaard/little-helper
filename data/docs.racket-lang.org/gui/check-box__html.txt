►  The Racket Graphical Interface Toolkit
 1  Windowing
 2  Windowing Classes
 3  Windowing Functions
 4  Editors
 5  Snip and Style Classes
 6  Editor Classes
 7  Editor Functions
 8  WXME Decoding
 9  Preferences
10  Dynamic Loading
11  Startup Actions
12  Platform Dependencies
    Index
▼ 2  Windowing Classes
 2.1  area<%>
 2.2  area-container<%>
 2.3  area-container-window<%>
 2.4  button%
 2.5  canvas<%>
 2.6  canvas%
 2.7  check-box%
 2.8  checkable-menu-item%
 2.9  choice%
2.10  clipboard-client%
2.11  clipboard<%>
2.12  combo-field%
2.13  control<%>
2.14  column-control-event%
2.15  control-event%
2.16  cursor%
2.17  dialog%
2.18  event%
2.19  frame%
2.20  gauge%
2.21  group-box-panel%
2.22  grow-box-spacer-pane%
2.23  horizontal-pane%
2.24  horizontal-panel%
2.25  key-event%
2.26  labelled-menu-item<%>
2.27  list-box%
2.28  list-control<%>
2.29  menu%
2.30  menu-bar%
2.31  menu-item<%>
2.32  menu-item%
2.33  menu-item-container<%>
2.34  message%
2.35  mouse-event%
2.36  pane%
2.37  panel%
2.38  popup-menu%
2.39  printer-dc%
2.40  radio-box%
2.41  selectable-menu-item<%>
2.42  separator-menu-item%
2.43  scroll-event%
2.44  slider%
2.45  subarea<%>
2.46  subwindow<%>
2.47  tab-panel%
2.48  text-field%
2.49  timer%
2.50  top-level-window<%>
2.51  vertical-pane%
2.52  vertical-panel%
2.53  window<%>
On this page:
get-value
set-label
set-value
Inherited methods:
from control<%>
command
from subwindow<%>
reparent
from window<%>
accept-drop-files
client->screen
enable
focus
get-client-handle
get-client-size
get-cursor
get-handle
get-height
get-label
get-plain-label
get-size
get-width
get-x
get-y
has-focus?
is-enabled?
is-shown?
on-drop-file
on-focus
on-move
on-size
on-subwindow-char
on-subwindow-event
on-superwindow-enable
on-superwindow-show
popup-menu
refresh
screen->client
set-cursor
show
from area<%>
get-graphical-min-size
get-parent
get-top-level-window
min-height
min-width
stretchable-height
stretchable-width
from subarea<%>
horiz-margin
vert-margin
[...search manuals...]
  top← prev  up  next → 

check-box% : class?
  superclass: object%

  extends:  control<%>
A check box is a labeled box which is either checked or unchecked.

Whenever a check box is clicked by the user, the check box’s value is toggled
and its callback procedure is invoked. A callback procedure is provided as an
initialization argument when each check box is created.

(new check-box%    [label label]                              
                   [parent parent]                            
                 [ [callback callback]                        
                   [style style]                              
                   [value value]                              
                   [font font]                                
                   [enabled enabled]                          
                   [vert-margin vert-margin]                  
                   [horiz-margin horiz-margin]                
                   [min-width min-width]                      
                   [min-height min-height]                    
                   [stretchable-width stretchable-width]      
                   [stretchable-height stretchable-height]])  
 → (is-a?/c check-box%)
  label : (or/c label-string? (is-a?/c bitmap%))
   parent   :   (or/c (is-a?/c frame%) (is-a?/c dialog%)
                      (is-a?/c panel%) (is-a?/c pane%))
   callback   :   ((is-a?/c check-box%) (is-a?/c control-event%) . -> . any)
              =   (lambda (c e) (void))
  style : (listof (one-of/c 'deleted)) = null
  value : any/c = #f
  font : (is-a?/c font%) = normal-control-font
  enabled : any/c = #t
  vert-margin : (integer-in 0 1000) = 2
  horiz-margin : (integer-in 0 1000) = 2
  min-width : (integer-in 0 10000) = graphical-minimum-width
  min-height : (integer-in 0 10000) = graphical-minimum-height
  stretchable-width : any/c = #f
  stretchable-height : any/c = #f
Creates a check box with a string or bitmap label. If label is a bitmap, and if
the bitmap has a mask (see get-loaded-mask in bitmap%) that is the same size as
the bitmap, then the mask is used for the label. Modifying a bitmap while it is
used as a label has an unspecified effect on the displayed label.

If & occurs in label (when label is a string), it is specially parsed as for
button%.

The callback procedure is called (with the event type 'check-box) whenever the
user clicks the check box.

If style includes 'deleted, then the check box is created as hidden, and it
does not affect its parent’s geometry; the check box can be made active later
by calling parent’s add-child method.

If value is true, it is passed to set-value so that the box is initially
checked.

The font argument determines the font for the control. For information about
the enabled argument, see window<%>. For information about the horiz-margin and
vert-margin arguments, see subarea<%>. For information about the min-width,
min-height, stretchable-width, and stretchable-height arguments, see area<%>.

(send a-check-box get-value) → boolean?
Gets the state of the check box: #t if it is checked, #f otherwise.

(send a-check-box set-label label) → void?
  label : (or/c label-string? (is-a?/c bitmap%))
Overrides set-label in window<%>.
The same as set-label in window<%> when label is a string.

Otherwise, sets the bitmap label for a bitmap check box. Since label is a
bitmap, if the bitmap has a mask (see get-loaded-mask in bitmap%) that is the
same size as the bitmap, then the mask is used for the label. Modifying a
bitmap while it is used as a label has an unspecified effect on the displayed
label. The bitmap label is installed only if the control was originally created
with a bitmap label.

(send a-check-box set-value state) → void?
  state : any/c
Sets the check box’s state. (The control’s callback procedure is not invoked.)

The check box’s state can be changed by the user clicking the control, and such
changes do not go through this method; use the control callback procedure
(provided as an initialization argument) to monitor state changes.

If state is #f, the box is unchecked, otherwise it is checked.

[...search manuals...]
  top← prev  up  next → 
 
