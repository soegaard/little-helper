►  The Racket Graphical Interface Toolkit
 1  Windowing
 2  Windowing Classes
 3  Windowing Functions
 4  Editors
 5  Snip and Style Classes
 6  Editor Classes
 7  Editor Functions
 8  WXME Decoding
 9  Preferences
10  Dynamic Loading
11  Startup Actions
12  Platform Dependencies
    Index
▼ 2  Windowing Classes
 2.1  area<%>
 2.2  area-container<%>
 2.3  area-container-window<%>
 2.4  button%
 2.5  canvas<%>
 2.6  canvas%
 2.7  check-box%
 2.8  checkable-menu-item%
 2.9  choice%
2.10  clipboard-client%
2.11  clipboard<%>
2.12  combo-field%
2.13  control<%>
2.14  column-control-event%
2.15  control-event%
2.16  cursor%
2.17  dialog%
2.18  event%
2.19  frame%
2.20  gauge%
2.21  group-box-panel%
2.22  grow-box-spacer-pane%
2.23  horizontal-pane%
2.24  horizontal-panel%
2.25  key-event%
2.26  labelled-menu-item<%>
2.27  list-box%
2.28  list-control<%>
2.29  menu%
2.30  menu-bar%
2.31  menu-item<%>
2.32  menu-item%
2.33  menu-item-container<%>
2.34  message%
2.35  mouse-event%
2.36  pane%
2.37  panel%
2.38  popup-menu%
2.39  printer-dc%
2.40  radio-box%
2.41  selectable-menu-item<%>
2.42  separator-menu-item%
2.43  scroll-event%
2.44  slider%
2.45  subarea<%>
2.46  subwindow<%>
2.47  tab-panel%
2.48  text-field%
2.49  timer%
2.50  top-level-window<%>
2.51  vertical-pane%
2.52  vertical-panel%
2.53  window<%>
On this page:
get-alt-down
get-caps-down
get-control-down
get-key-code
get-key-release-code
get-meta-down
get-other-altgr-key-code
get-other-caps-key-code
get-other-shift-altgr-key-code
get-other-shift-key-code
get-shift-down
get-x
get-y
set-alt-down
set-caps-down
set-control-down
set-key-code
set-key-release-code
set-meta-down
set-other-altgr-key-code
set-other-caps-key-code
set-other-shift-altgr-key-code
set-other-shift-key-code
set-shift-down
set-x
set-y
Inherited methods:
from event%
get-time-stamp
set-time-stamp
[...search manuals...]
  top← prev  up  next → 

key-event% : class?
  superclass: event%

A key-event% object contains information about a key press or release event.
Key events are primarily processed by on-subwindow-char in window<%> and
on-char in canvas<%>.

For a key-press event, a virtual key code is provided by get-key-code. For a
key-release event, get-key-code reports 'release, and a virtual key code is
provided by get-key-release-code.

See also Mouse and Keyboard Events.

(new key-event%  [ [key-code key-code]          
                   [shift-down shift-down]      
                   [control-down control-down]  
                   [meta-down meta-down]        
                   [alt-down alt-down]          
                   [x x]                        
                   [y y]                        
                   [time-stamp time-stamp]      
                   [caps-down caps-down]])      
 → (is-a?/c key-event%)
  key-code : (or/c char? key-code-symbol?) = #\nul
  shift-down : any/c = #f
  control-down : any/c = #f
  meta-down : any/c = #f
  alt-down : any/c = #f
  x : exact-integer? = 0
  y : exact-integer? = 0
  time-stamp : exact-integer? = 0
  caps-down : any/c = #f
See the corresponding get- and set- methods for information about key-code,
shift-down, control-down, meta-down, alt-down, x, y, time-stamp, caps-down.

The release key code, as returned by get-key-release-code, is initialized to
'press.

(send a-key-event get-alt-down) → boolean?
Returns #t if the Option (Mac OS X) key was down for the event. When the Alt
key is pressed in Windows, it is reported as a Meta press (see get-meta-down).

(send a-key-event get-caps-down) → boolean?
Returns #t if the Caps Lock key was on for the event.

(send a-key-event get-control-down) → boolean?
Returns #t if the Control key was down for the event.

On Mac OS X, if a control-key press is combined with a mouse button click, the
event is reported as a right-button click and get-control-down for the event
reports #f.

(send a-key-event get-key-code)
 → (or/c char? key-code-symbol?)
Gets the virtual key code for the key event. The virtual key code is either a
character or a special key symbol, one of the following:

  • 'start

  • 'cancel

  • 'clear

  • 'shift

  • 'control

  • 'menu

  • 'pause

  • 'capital

  • 'prior

  • 'next

  • 'end

  • 'home

  • 'left

  • 'up

  • 'right

  • 'down

  • 'escape

  • 'select

  • 'print

  • 'execute

  • 'snapshot

  • 'insert

  • 'help

  • 'numpad0

  • 'numpad1

  • 'numpad2

  • 'numpad3

  • 'numpad4

  • 'numpad5

  • 'numpad6

  • 'numpad7

  • 'numpad8

  • 'numpad9

  • 'numpad-enter

  • 'multiply

  • 'add

  • 'separator

  • 'subtract

  • 'decimal

  • 'divide

  • 'f1

  • 'f2

  • 'f3

  • 'f4

  • 'f5

  • 'f6

  • 'f7

  • 'f8

  • 'f9

  • 'f10

  • 'f11

  • 'f12

  • 'f13

  • 'f14

  • 'f15

  • 'f16

  • 'f17

  • 'f18

  • 'f19

  • 'f20

  • 'f21

  • 'f22

  • 'f23

  • 'f24

  • 'numlock

  • 'scroll

  • 'wheel-up — mouse wheel up one notch

  • 'wheel-down — mouse wheel down one notch

  • 'wheel-left — mouse wheel left one notch

  • 'wheel-right — mouse wheel right one notch

  • 'release — indicates a key-release event

  • 'press — indicates a key-press event; usually only from
    get-key-release-code

The special key symbols attempt to capture useful keys that have no standard
ASCII representation. A few keys have standard representations that are not
obvious:

  • #\space — the space bar

  • #\return — the Enter or Return key (on all platforms), but not necessarily
    the Enter key near the numpad (which is reported as 'numpad-enter if the
    platform distinguishes the two Enter keys)

  • #\tab — the tab key

  • #\backspace — the backspace key

  • #\rubout — the delete key

If a suitable special key symbol or ASCII representation is not available, #\
nul (the NUL character) is reported.

A 'wheel-up, 'wheel-down, 'wheel-left, or 'wheel-right event may be sent to a
window other than the one with the keyboard focus, because some platforms
generate wheel events based on the location of the mouse pointer instead of the
keyboard focus.

On Windows, when the Control key is pressed without Alt, the key code for ASCII
characters is downcased, roughly cancelling the effect of the Shift key. On Mac
OS X, the key code is computed without Caps Lock effects when the Control or
Command key is pressed; in the case of Control, Caps Lock is used normally if
special handling is disabled for the Control key via special-control-key. On
Unix, the key code is computed with Caps Lock effects when the Control key is
pressed without Alt.

See also get-other-shift-key-code.

(send a-key-event get-key-release-code)
 → (or/c char? key-code-symbol?)
Gets the virtual key code for a key-release event; the result is 'press for a
key-press event. See get-key-code for the list of virtual key codes.

(send a-key-event get-meta-down) → boolean?
Returns #t if the Meta (Unix), Alt (Windows), or Command (Mac OS X) key was
down for the event.

(send a-key-event get-other-altgr-key-code)
 → (or/c char? key-code-symbol? false/c)
See get-other-shift-key-code.

(send a-key-event get-other-caps-key-code)
 → (or/c char? key-code-symbol? false/c)
See get-other-shift-key-code.

(send a-key-event get-other-shift-altgr-key-code)
 → (or/c char? key-code-symbol? false/c)
See get-other-shift-key-code.

(send a-key-event get-other-shift-key-code)
 → (or/c char? key-code-symbol? false/c)
Since keyboard mappings vary, it is sometimes useful in key mappings for a
program to know the result that the keyboard would have produced for an event
if the Shift key had been toggled differently. The get-other-shift-key-code
produces that other mapping, returning #f if the alternate mapping is
unavailable, otherwise returning the same kind of result as get-key-code.

The get-other-altgr-key-code method provides the same information with respect
to the AltGr key (i.e., Alt combined with Control) on Windows and Unix, or the
Option key on Mac OS X. The get-other-shift-altgr-key-code method reports a
mapping for in tha case that both Shift and AltGr/Option were different from
the actual event.

The get-other-shift-key-code, get-other-altgr-key-code, and
get-other-shift-altgr-key-code results all report key mappings where Caps Lock
is off, independent of whether Caps Lock was on for the actual event. The
get-other-caps-key-code method reports a mapping for in that case that the Caps
Lock state was treated opposite as for the get-key-code result. (Caps Lock
normally has either no effect or the same effect as Shift, so further
combinations involving Caps Lock and other modifier keys would not normally
produce further alternatives.)

Alternate mappings are not available for all events. On Windows, alternate
mappings are reported when they produce ASCII letters, ASCII digits, and ASCII
symbols. On Mac OS X, alternate mappings are available only when the Command
key is pressed. On Unix, alternate mappings are usually available.

(send a-key-event get-shift-down) → boolean?
Returns #t if the Shift key was down for the event.

(send a-key-event get-x) → exact-integer?
Returns the x-position of the mouse at the time of the event, in the target’s
window’s (client-area) coordinate system.

(send a-key-event get-y) → exact-integer?
Returns the y-position of the mouse at the time of the event in the target’s
window’s (client-area) coordinate system.

(send a-key-event set-alt-down down?) → void?
  down? : any/c
Sets whether the Option (Mac OS X) key was down for the event. When the Alt key
is pressed in Windows, it is reported as a Meta press (see set-meta-down).

(send a-key-event set-caps-down down?) → void?
  down? : any/c
Sets whether the Caps Lock key was on for the event.

(send a-key-event set-control-down down?) → void?
  down? : any/c
Sets whether the Control key was down for the event.

On Mac OS X, if a control-key press is combined with a mouse button click, the
event is reported as a right-button click and get-control-down for the event
reports #f.

(send a-key-event set-key-code code) → void?
  code : (or/c char? key-code-symbol?)
Sets the virtual key code for the event, either a character or one of the
special symbols listed with get-key-code.

(send a-key-event set-key-release-code code) → void?
  code : (or/c char? key-code-symbol?)
Sets the virtual key code for a release event, either a character or one of the
special symbols listed with get-key-code. See also get-key-release-code.

(send a-key-event set-meta-down down?) → void?
  down? : any/c
Sets whether the Meta (Unix), Alt (Windows), or Command (Mac OS X) key was down
for the event.

(send a-key-event set-other-altgr-key-code code) → void?
  code : (or/c char? key-code-symbol? false/c)
Sets the key code produced by get-other-altgr-key-code.

(send a-key-event set-other-caps-key-code code) → void?
  code : (or/c char? key-code-symbol? false/c)
Sets the key code produced by get-other-caps-key-code.

(send a-key-event set-other-shift-altgr-key-code code) → void?
  code : (or/c char? key-code-symbol? false/c)
Sets the key code produced by get-other-shift-altgr-key-code.

(send a-key-event set-other-shift-key-code code) → void?
  code : (or/c char? key-code-symbol? false/c)
Sets the key code produced by get-other-shift-key-code.

(send a-key-event set-shift-down down?) → void?
  down? : any/c
Sets whether the Shift key was down for the event.

(send a-key-event set-x pos) → void?
  pos : exact-integer?
Sets the x-position of the mouse at the time of the event in the target’s
window’s (client-area) coordinate system.

(send a-key-event set-y pos) → void?
  pos : exact-integer?
Sets the y-position of the mouse at the time of the event in the target’s
window’s (client-area) coordinate system.

[...search manuals...]
  top← prev  up  next → 
 
