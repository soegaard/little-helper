►  The Racket Graphical Interface Toolkit
 1  Windowing
 2  Windowing Classes
 3  Windowing Functions
 4  Editors
 5  Snip and Style Classes
 6  Editor Classes
 7  Editor Functions
 8  WXME Decoding
 9  Preferences
10  Dynamic Loading
11  Startup Actions
12  Platform Dependencies
    Index
▼ 2  Windowing Classes
 2.1  area<%>
 2.2  area-container<%>
 2.3  area-container-window<%>
 2.4  button%
 2.5  canvas<%>
 2.6  canvas%
 2.7  check-box%
 2.8  checkable-menu-item%
 2.9  choice%
2.10  clipboard-client%
2.11  clipboard<%>
2.12  combo-field%
2.13  control<%>
2.14  column-control-event%
2.15  control-event%
2.16  cursor%
2.17  dialog%
2.18  event%
2.19  frame%
2.20  gauge%
2.21  group-box-panel%
2.22  grow-box-spacer-pane%
2.23  horizontal-pane%
2.24  horizontal-panel%
2.25  key-event%
2.26  labelled-menu-item<%>
2.27  list-box%
2.28  list-control<%>
2.29  menu%
2.30  menu-bar%
2.31  menu-item<%>
2.32  menu-item%
2.33  menu-item-container<%>
2.34  message%
2.35  mouse-event%
2.36  pane%
2.37  panel%
2.38  popup-menu%
2.39  printer-dc%
2.40  radio-box%
2.41  selectable-menu-item<%>
2.42  separator-menu-item%
2.43  scroll-event%
2.44  slider%
2.45  subarea<%>
2.46  subwindow<%>
2.47  tab-panel%
2.48  text-field%
2.49  timer%
2.50  top-level-window<%>
2.51  vertical-pane%
2.52  vertical-panel%
2.53  window<%>
On this page:
auto-resize
set-label
Inherited methods:
from control<%>
command
from subwindow<%>
reparent
from window<%>
accept-drop-files
client->screen
enable
focus
get-client-handle
get-client-size
get-cursor
get-handle
get-height
get-label
get-plain-label
get-size
get-width
get-x
get-y
has-focus?
is-enabled?
is-shown?
on-drop-file
on-focus
on-move
on-size
on-subwindow-char
on-subwindow-event
on-superwindow-enable
on-superwindow-show
popup-menu
refresh
screen->client
set-cursor
show
from area<%>
get-graphical-min-size
get-parent
get-top-level-window
min-height
min-width
stretchable-height
stretchable-width
from subarea<%>
horiz-margin
vert-margin
[...search manuals...]
  top← prev  up  next → 

message% : class?
  superclass: object%

  extends:  control<%>
A message control is a static line of text or a static bitmap. The text or
bitmap corresponds to the message’s label (see set-label).

(new message%    [label label]                            
                 [parent parent]                          
               [ [style style]                            
                 [font font]                              
                 [enabled enabled]                        
                 [vert-margin vert-margin]                
                 [horiz-margin horiz-margin]              
                 [min-width min-width]                    
                 [min-height min-height]                  
                 [stretchable-width stretchable-width]    
                 [stretchable-height stretchable-height]  
                 [auto-resize auto-resize]])              
 → (is-a?/c message%)
   label   :   (or/c label-string? (is-a?/c bitmap%)
                     (one-of/c 'app 'caution 'stop))
   parent   :   (or/c (is-a?/c frame%) (is-a?/c dialog%)
                      (is-a?/c panel%) (is-a?/c pane%))
  style : (listof (one-of/c 'deleted)) = null
  font : (is-a?/c font%) = normal-control-font
  enabled : any/c = #t
  vert-margin : (integer-in 0 1000) = 2
  horiz-margin : (integer-in 0 1000) = 2
  min-width : (integer-in 0 10000) = graphical-minimum-width
  min-height : (integer-in 0 10000) = graphical-minimum-height
  stretchable-width : any/c = #f
  stretchable-height : any/c = #f
  auto-resize : any/c = #f
Creates a string or bitmap message initially showing label. If label is a
bitmap, and if the bitmap has a mask (see get-loaded-mask in bitmap%) that is
the same size as the bitmap, then the mask is used for the label. Modifying a
bitmap while it is used as a label has an unspecified effect on the displayed
label. An 'app, 'caution, or 'stop symbol for label indicates an icon; 'app is
the application icon (Windows and Mac OS X) or a generic “info” icon (X),
'caution is a caution-sign icon, and 'stop is a stop-sign icon.

If & occurs in label, it is specially parsed; under Windows and X, the
character following & is underlined in the displayed control to indicate a
keyboard mnemonic. (Under Mac OS X, mnemonic underlines are not shown.) The
mnemonic is meaningless for a message (as far as on-traverse-char in
top-level-window<%> is concerned), but it is supported for consistency with
other control types. A programmer may assign a meaning to the mnemonic (e.g.,
by overriding on-traverse-char).

If style includes 'deleted, then the message is created as hidden, and it does
not affect its parent’s geometry; the message can be made active later by
calling parent’s add-child method.

The font argument determines the font for the control. For information about
the enabled argument, see window<%>. For information about the horiz-margin and
vert-margin arguments, see subarea<%>. For information about the min-width,
min-height, stretchable-width, and stretchable-height arguments, see area<%>.

If auto-resize is not #f, then automatic resizing is initially enanbled (see
auto-resize), and the message% object’s graphical minimum size is as small as
possible.

(send a-message auto-resize) → boolean?
(send a-message auto-resize on?) → void?
  on? : any/c
Reports or sets whether the message%’s min-width and min-height are
automatically set when the label is changed via set-label.

(send a-message set-label label) → void?
  label : (or/c label-string? (is-a?/c bitmap%))
Overrides set-label in window<%>.
The same as set-label in window<%> when label is a string.

Otherwise, sets the bitmap label for a bitmap message. Since label is a bitmap,
if the bitmap has a mask (see get-loaded-mask in bitmap%) that is the same size
as the bitmap, then the mask is used for the label. Modifying a bitmap while it
is used as a label has an unspecified effect on the displayed label. The bitmap
label is installed only if the control was originally created with a bitmap
label.

[...search manuals...]
  top← prev  up  next → 
 
