►  The Racket Graphical Interface Toolkit
 1  Windowing
 2  Windowing Classes
 3  Windowing Functions
 4  Editors
 5  Snip and Style Classes
 6  Editor Classes
 7  Editor Functions
 8  WXME Decoding
 9  Preferences
10  Dynamic Loading
11  Startup Actions
12  Platform Dependencies
    Index
▼ 2  Windowing Classes
 2.1  area<%>
 2.2  area-container<%>
 2.3  area-container-window<%>
 2.4  button%
 2.5  canvas<%>
 2.6  canvas%
 2.7  check-box%
 2.8  checkable-menu-item%
 2.9  choice%
2.10  clipboard-client%
2.11  clipboard<%>
2.12  combo-field%
2.13  control<%>
2.14  column-control-event%
2.15  control-event%
2.16  cursor%
2.17  dialog%
2.18  event%
2.19  frame%
2.20  gauge%
2.21  group-box-panel%
2.22  grow-box-spacer-pane%
2.23  horizontal-pane%
2.24  horizontal-panel%
2.25  key-event%
2.26  labelled-menu-item<%>
2.27  list-box%
2.28  list-control<%>
2.29  menu%
2.30  menu-bar%
2.31  menu-item<%>
2.32  menu-item%
2.33  menu-item-container<%>
2.34  message%
2.35  mouse-event%
2.36  pane%
2.37  panel%
2.38  popup-menu%
2.39  printer-dc%
2.40  radio-box%
2.41  selectable-menu-item<%>
2.42  separator-menu-item%
2.43  scroll-event%
2.44  slider%
2.45  subarea<%>
2.46  subwindow<%>
2.47  tab-panel%
2.48  text-field%
2.49  timer%
2.50  top-level-window<%>
2.51  vertical-pane%
2.52  vertical-panel%
2.53  window<%>
On this page:
enable
get-help-string
get-label
get-plain-label
is-enabled?
on-demand
set-help-string
set-label
Inherited methods:
from menu-item<%>
delete
get-parent
is-deleted?
restore
[...search manuals...]
  top← prev  up  next → 

labelled-menu-item<%> : interface?
  implements:  menu-item<%>
A labelled-menu-item<%> object is a menu-item<%> with a string label (i.e., any
menu item other than a separator). More specifically, it is an instance of
either menu-item% (a plain menu item), checkable-menu-item% (a checkable menu
item), or menu% (a submenu).

(send a-labelled-menu-item enable enabled?) → void?
  enabled? : any/c
Enables or disables the menu item. If the item is a submenu (or menu in a menu
bar), the entire menu is disabled, but each submenu item’s is-enabled? method
returns #f only if the item is specifically disabled (in addition to the
submenu).

(send a-labelled-menu-item get-help-string)
 → (or/c label-string? false/c)
Returns the help string for the menu item, or #f if the item has no help
string.

When an item has a help, the string may be used to display help information to
the user.

(send a-labelled-menu-item get-label) → label-string?
Returns the item’s label.

See also set-label and get-plain-label.

(send a-labelled-menu-item get-plain-label) → label-string?
Like get-label, except that &s in the label are removed as described in
set-label.

(send a-labelled-menu-item is-enabled?) → boolean?
Returns #t if the menu item is enabled, #f otherwise.

See also enable.

(send a-labelled-menu-item on-demand) → void?
Specification: Normally called when the user clicks on the menu bar containing
the item (before the user sees any menu items), just before the popup menu
containing the item is popped up, or just before inspecting the menu bar
containing the item for a shortcut key binding.

A on-demand in menu-item-container<%> method can be overridden in such a way
that the container does not call the on-demand method of its items.

Default implementation: Calls the demand-callback procedure that was provided
when the object was created.

(send a-labelled-menu-item set-help-string help) → void?
  help : (or/c label-string? false/c)
Sets the help string for the menu item. Use #f to remove the help string for an
item.

(send a-labelled-menu-item set-label label) → void?
  label : label-string?
Sets the menu item’s label. If the item has a shortcut, the shortcut is not
affected.

If the label contains & and the window is a control, the label is parsed
specially; on Windows and Unix, the character following a & is underlined in
the displayed menu to indicate a keyboard mnemonic. Pressing the Alt key with
an underlined character from a menu’s name in the menu bar causes the menu to
be selected (via on-menu-char). When a menu has the focus, the mnemonic
characters are used for navigation without Alt. A && in the label is replaced
by a literal (non-navigation) &. On Mac OS X, &s in the label are parsed in the
same way as for Unix and Windows, but no mnemonic underline is displayed.

A & is always preserved in the label returned by get-label, but never preserved
in the label returned by get-plain-label.

For historical reasons, if a label contains a tab character, then the tab and
all remaining characters are hidden in the displayed menu.

[...search manuals...]
  top← prev  up  next → 
 
