#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 53 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 3954 0 17 3 52
#";;; bit-io.scm  --  Jens Axel S\303\270gaard -- april 2006"
0 0 4 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 53 #" This file started as a PLT port of Oleg's bit-reader"
0 0 17 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 60
#"    <http://okmij.org/ftp/Scheme/binary-io.html#bit-reader>,"
0 0 17 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 56 #" then a bit-writer was added, and finally bit-ports were"
0 0 17 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #" added."
0 0 17 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 15 3 2 #"(m"
0 0 15 3 5 #"odule"
0 0 14 3 1 #" "
0 0 14 3 7 #"bit-io "
0 0 14 3 8 #"mzscheme"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 14 3 7 #"(provid"
0 0 32 3 1 #"e"
0 0 4 3 1 #" "
0 0 15 3 24 #" with-input-from-bit-fil"
0 0 28 3 1 #"e"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 15 3 23 #" with-output-to-bit-fil"
0 0 28 3 1 #"e"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 19 #" open-input-bit-fil"
0 0 28 3 1 #"e"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 20 #" open-output-bit-fil"
0 0 28 3 1 #"e"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 20 #" close-input-bit-por"
0 0 28 3 1 #"t"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 21 #" close-output-bit-por"
0 0 28 3 1 #"t"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 9 #" read-bit"
0 0 28 3 1 #"s"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 10 #" write-bit"
0 0 28 3 1 #"s"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 23 #" current-output-bit-por"
0 0 28 3 1 #"t"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 22 #" current-input-bit-por"
0 0 28 3 1 #"t"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 10 #" flush-bit"
0 0 28 3 1 #"s"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 17 #" bit-file-positio"
0 0 28 3 1 #"n"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 24 #" call-with-input-bit-fil"
0 0 28 3 1 #"e"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 25 #" call-with-output-bit-fil"
0 0 28 3 1 #"e"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 1 #" "
0 0 17 3 11 #"; LOW LEVEL"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 1 #" "
0 0 17 3 16 #";make-bit-reader"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 1 #" "
0 0 17 3 16 #";make-bit-writer"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 1 #" "
0 0 17 3 19 #";current-bit-reader"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 1 #" "
0 0 17 3 19 #";current-bit-writer"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 1 #" "
0 0 17 3 20 #";current-bit-flusher"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 2 #" )"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 54 #"; A BIT-PORT consists of an underlying (byte) port and"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 28 #"; the current (bit)position."
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 13 #"(define-struc"
0 0 32 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 1 #"("
0 0 14 3 5 #"port "
0 0 14 3 2 #"po"
0 0 22 3 3 #"s))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 61
#"; An INPUT-BIT-PORT is a bit-port with a concrete byte-reader"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 68
#"; which from which the corresponding bit-reader read is constructed."
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 13 #"(define-struc"
0 0 32 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 14 #"(input-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 22 3 2 #"t)"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 14 3 1 #"("
0 0 14 3 12 #"byte-reader "
0 0 14 3 3 #"rea"
0 0 22 3 3 #"d))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 62
#"; An OUTPUT-BIT-PORT is a bit-port with a concrete byte-writer"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 63
#"; from which the corresponding bit-writer write is constructed."
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 63
#"; Bits aren't written to the underlying byte port until a whole"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 64
#"; byte is received - a flush operations is thus sometimes needed"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 23 #"; at the end of a file."
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 13 #"(define-struc"
0 0 32 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 15 #"(output-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 22 3 3 #"t) "
0 0 14 3 1 #"("
0 0 14 3 12 #"byte-writer "
0 0 14 3 6 #"write "
0 0 14 3 4 #"flus"
0 0 22 3 3 #"h))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 60
#"; open-input-bit-file : path [symbol ... ] -> input-bit-port"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 29 #";   analog to open-input-file"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 19 #"(open-input-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 26 3 2 #" ."
0 0 14 3 7 #" option"
0 0 22 3 2 #"s)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 15 3 3 #"(le"
0 0 32 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 9 #"[byte-por"
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 5 #"(appl"
0 0 32 3 1 #"y"
0 0 14 3 15 #" open-input-fil"
0 0 32 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 7 #" option"
0 0 22 3 4 #"s)])"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #" "
0 0 14 3 19 #"(make-input-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 9 #" byte-por"
0 0 28 3 1 #"t"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 20 3 2 #" 0"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #" "
0 0 15 3 1 #"("
0 0 32 3 2 #"\316\273"
0 0 22 3 4 #" () "
0 0 14 3 9 #"(read-byt"
0 0 28 3 1 #"e"
0 0 14 3 9 #" byte-por"
0 0 22 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #" "
0 0 14 3 15 #"(make-bit-reade"
0 0 28 3 1 #"r"
0 0 22 3 1 #" "
0 0 15 3 1 #"("
0 0 32 3 2 #"\316\273"
0 0 22 3 4 #" () "
0 0 14 3 9 #"(read-byt"
0 0 28 3 1 #"e"
0 0 14 3 9 #" byte-por"
0 0 22 3 7 #"t))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 62
#" ; open-output-bit-file : path [symbol ...] -> output-bit-port"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 31 #" ;   analog to open-output-file"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 20 #"(open-output-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 26 3 2 #" ."
0 0 14 3 7 #" option"
0 0 22 3 2 #"s)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 15 3 3 #"(le"
0 0 32 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 9 #"[byte-por"
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 5 #"(appl"
0 0 32 3 1 #"y"
0 0 14 3 16 #" open-output-fil"
0 0 32 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 7 #" option"
0 0 22 3 4 #"s)])"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #" "
0 0 15 3 10 #"(let-value"
0 0 32 3 1 #"s"
0 0 22 3 3 #" (["
0 0 14 3 10 #"(bit-write"
0 0 28 3 1 #"r"
0 0 14 3 11 #" bit-flushe"
0 0 22 3 2 #"r)"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #" "
0 0 14 3 15 #"(make-bit-write"
0 0 28 3 1 #"r"
0 0 22 3 1 #" "
0 0 15 3 1 #"("
0 0 32 3 2 #"\316\273"
0 0 22 3 1 #" "
0 0 14 3 1 #"("
0 0 22 3 3 #"b) "
0 0 14 3 10 #"(write-byt"
0 0 32 3 1 #"e"
0 0 14 3 1 #" "
0 0 28 3 1 #"b"
0 0 14 3 9 #" byte-por"
0 0 22 3 6 #"t)))])"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #" "
0 0 14 3 20 #"(make-output-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 9 #" byte-por"
0 0 28 3 1 #"t"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 20 3 2 #" 0"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #" "
0 0 15 3 1 #"("
0 0 32 3 2 #"\316\273"
0 0 22 3 1 #" "
0 0 14 3 1 #"("
0 0 22 3 3 #"b) "
0 0 14 3 10 #"(write-byt"
0 0 32 3 1 #"e"
0 0 14 3 1 #" "
0 0 28 3 1 #"b"
0 0 14 3 9 #" byte-por"
0 0 22 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 14 3 10 #" bit-write"
0 0 28 3 1 #"r"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 14 3 11 #" bit-flushe"
0 0 22 3 5 #"r))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 19 #"; current bit-ports"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 14 3 22 #" current-input-bit-por"
0 0 28 3 1 #"t"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 14 3 14 #"(make-paramete"
0 0 32 3 1 #"r"
0 0 20 3 1 #" "
0 0 14 3 1 #"'"
0 0 14 3 7 #"none-ye"
0 0 22 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 14 3 23 #" current-output-bit-por"
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 14 #"(make-paramete"
0 0 32 3 1 #"r"
0 0 20 3 1 #" "
0 0 14 3 1 #"'"
0 0 14 3 7 #"none-ye"
0 0 22 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 43 #"; close-input-bit-port : input-bit-port -> "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 20 #"(close-input-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 22 3 2 #"t)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 14 3 16 #"(close-input-por"
0 0 32 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 13 #"(bit-port-por"
0 0 28 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 22 3 4 #"t)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 44 #"; close-output-bit-port : output-bit-port ->"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 21 #"(close-output-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 22 3 2 #"t)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #" ("
0 0 14 3 21 #"(output-bit-port-flus"
0 0 28 3 1 #"h"
0 0 14 3 8 #" bit-por"
0 0 22 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 14 3 17 #"(close-output-por"
0 0 32 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 13 #"(bit-port-por"
0 0 28 3 1 #"t"
0 0 14 3 8 #" bit-por"
0 0 22 3 4 #"t)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 66
#"; with-input-from-bit-file : path (-> alpha) [symbol ...] -> alpha"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 34 #";   analog to with-input-from-file"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 15 3 24 #"(with-input-from-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 5 #" thun"
0 0 28 3 1 #"k"
0 0 26 3 2 #" ."
0 0 14 3 7 #" option"
0 0 22 3 2 #"s)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 15 3 3 #"(le"
0 0 32 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 2 #"[i"
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 5 #"(appl"
0 0 32 3 1 #"y"
0 0 14 3 19 #" open-input-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 7 #" option"
0 0 22 3 4 #"s)])"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #" "
0 0 15 3 6 #"(begin"
0 0 32 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #" "
0 0 15 3 12 #"(parameteriz"
0 0 32 3 1 #"e"
0 0 22 3 2 #" ("
0 0 14 3 22 #"[current-input-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 2 #" i"
0 0 22 3 3 #"n])"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #" "
0 0 14 3 5 #"(thun"
0 0 22 3 3 #"k))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #" "
0 0 14 3 20 #"(close-input-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 2 #" i"
0 0 22 3 5 #"n))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 65
#"; with-output-to-bit-file : path (-> alpha) [symbol ...] -> alpha"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 26 #";   analog to with-to-file"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 15 3 23 #"(with-output-to-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 5 #" thun"
0 0 28 3 1 #"k"
0 0 26 3 2 #" ."
0 0 14 3 7 #" option"
0 0 22 3 2 #"s)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 15 3 3 #"(le"
0 0 32 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 3 #"[ou"
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 5 #"(appl"
0 0 32 3 1 #"y"
0 0 14 3 20 #" open-output-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 7 #" option"
0 0 22 3 4 #"s)])"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #" "
0 0 15 3 6 #"(begin"
0 0 32 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #" "
0 0 15 3 12 #"(parameteriz"
0 0 32 3 1 #"e"
0 0 22 3 2 #" ("
0 0 14 3 23 #"[current-output-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 3 #" ou"
0 0 22 3 3 #"t])"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #" "
0 0 14 3 5 #"(thun"
0 0 22 3 3 #"k))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #" "
0 0 14 3 21 #"(close-output-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 3 #" ou"
0 0 22 3 5 #"t))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 24 #"(call-with-input-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" pro"
0 0 28 3 1 #"c"
0 0 26 3 2 #" ."
0 0 14 3 7 #" option"
0 0 22 3 2 #"s)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #" "
0 0 15 3 3 #"(le"
0 0 32 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 2 #"[i"
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 5 #"(appl"
0 0 32 3 1 #"y"
0 0 14 3 19 #" open-input-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 7 #" option"
0 0 22 3 4 #"s)])"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #" "
0 0 15 3 6 #"(begin"
0 0 32 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #" "
0 0 14 3 4 #"(pro"
0 0 28 3 1 #"c"
0 0 14 3 2 #" i"
0 0 22 3 3 #"n))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #" "
0 0 14 3 20 #"(close-input-bit-por"
0 0 28 3 1 #"t"
0 0 14 3 2 #" i"
0 0 22 3 4 #"n)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #" "
0 0 15 3 6 #"(defin"
0 0 32 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 25 #"(call-with-output-bit-fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" fil"
0 0 28 3 1 #"e"
0 0 14 3 4 #" pro"
0 0 28 3 1 #"c"
0 0 26 3 2 #" ."
0 0 14 3 7 #" option"
0 0 22 3 2 #"s)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 3 #"out"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 20 #"open-output-bit-file"
0 0 4 3 1 #" "
0 0 14 3 4 #"file"
0 0 4 3 1 #" "
0 0 14 3 7 #"options"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"begin0"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 14 3 3 #"out"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 21 #"close-output-bit-port"
0 0 4 3 1 #" "
0 0 14 3 3 #"out"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 52 #"; write-bits : natural natural [output-bit-port] -> "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 54 #";   write n lower bits from bs to the output-bit-port,"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#";   if no output-bit-port is given use current-output-bit-port"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"write-bits"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 11 #"case-lambda"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 2 #"bs"
0 0 22 3 1 #")"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 10 #"write-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 2 #"bs"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"current-output-bit-port"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 2 #"bs"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 17 #"set-bit-port-pos!"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"bit-port-pos"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 2 #"(("
0 0 14 3 21 #"output-bit-port-write"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 2 #"bs"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 49 #"; read-bits : natural [input-bit-port] -> natural"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 40 #";   read n bits from the input-bit-port,"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 61
#";   if no input-bit-port is given, use current-input-bit-port"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"read-bits"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 11 #"case-lambda"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"current-input-bit-port"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 17 #"set-bit-port-pos!"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"bit-port-pos"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 2 #"(("
0 0 14 3 19 #"input-bit-port-read"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 35 #"; flush-bits : [output-bit-port] ->"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#";    flush remaining bits in the cache by append zeros until a"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 30 #";    whole byte can be written"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"flush-bits"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 11 #"case-lambda"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 3 #"[()"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 10 #"flush-bits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"current-output-bit-port"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 12 #"out-bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 21 #"output-bit-port-flush"
0 0 4 3 1 #" "
0 0 14 3 12 #"out-bit-port"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 41 #"; bit-file-position : bit-port -> natural"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 44 #";   return the bit-position of the bit-port,"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 76
(
 #";   the bit-position of an input-bit-port is the number of bits read"
 #" so far,"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#";   for an output-bit-port it is the number of bits written so far"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 49 #"; bit-file-position : bit-port natural -> natural"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 40 #";   set the bit-position of the bit-port"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 17 #"bit-file-position"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 52 #"; todo: this only sets the position on an input port"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 11 #"case-lambda"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 12 #"bit-port-pos"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 8 #"bit-port"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 6 #"unless"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"input-bit-port?"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 19 3 52 #"\"(bit-file-position bit-port n) is not implemented \""
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 19 3 23 #"\"for output bit ports.\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 13 #"file-position"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"bit-port-port"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"quotient"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-bits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-port"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 23 #";;; LOW LEVEL INTERFACE"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 38 #"; The following bit reader comes from "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 61
#";     <http://okmij.org/ftp/Scheme/binary-io.html#bit-reader>"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 16 #"; Binary parsing"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 41 #";----------------------------------------"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 10 #"; Apologia"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 71
(
 #"; Binary parsing and unparsing are transformations between primitive"
 #" or"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 68
#"; composite Scheme values and their external binary representations."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 64
#"; Examples include reading and writing JPEG, TIFF, MP3, ELF file"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 63
#"; formats, communicating with DNS, Kerberos, LDAP, SLP internet"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 72
(
 #"; services, participating in Sun RPC and CORBA/IIOP distributed syst"
 #"ems,"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 64
#"; storing and retrieving (arrays of) floating-point numbers in a"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #"; portable and efficient way. This project will propose a set of low"
 #"- and"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 67
#"; intermediate- level procedures that make binary parsing possible."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 68
#"; Scheme is a good language to do research in text compression. Text"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#"; compression involves a great deal of building and traversing"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 63
#"; dictionaries, trees and similar data structures, where Scheme"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 65
#"; excels. Performance doesn't matter in research, but the size of"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 61
#"; compressed files does (to figure out the bpc for the common"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 65
#"; benchmarks). Variable-bit i/o is a necessity. It is implemented"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 22 #"; in the present file."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 56 #"; ASN.1 corresponds to a higher-level parsing (LR parser"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 69
(
 #"; vs. lexer). Information in LDAP responses and X.509 certificates i"
 #"s"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; structural and recursive, and so lends itself to be processed in"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 69
(
 #"; Scheme. Variable bit i/o is necessary, and so is a binary lexer fo"
 #"r"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 65
#"; a LR parser. Parsing of ASN.1 is a highly profitable enterprise"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 41 #";----------------------------------------"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 28 #"; The outline of the project"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 24 #"; Primitives and streams"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 14 #"; - read-byte "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 35 #"; - read-u8vector (cf. read-string)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 75
(
 #"; - with-input-from-u8vector, with-input-from-encoded-u8vector 'base"
 #"64,... "
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 68
#"; building binary i/o streams from a sequence of bytes. Streams over"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #"; u8vector, u16vector, etc. provide a serial access to memory. See S"
 #"RFI-4"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 61
#"; - read-bit, read-bits via overlayed streams given read-byte"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 34 #"; implemented in the present file."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 35 #"; -  mmap-u8vector, munmap-u8vector"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 13 #"; Conversions"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 43 #";  - u8vector->integer u8vector endianness,"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 43 #";    u8vector->sinteger u8vector endianness"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #";  These conversion procedures turn a sequence of bytes to an unsign"
 #"ed or"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 71
(
 #";  signed integer, minding the byte order. The u8vector in question "
 #"can"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 72
(
 #";  have size 1,2,4,8, 3 etc. bytes. These two functions therefore ca"
 #"n be"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 57 #";  used to read shorts, longs, extra longs, etc. numbers."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 58
#";  - u8vector-reverse and other useful u8vector operations"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #"; "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 23 #";  - modf, frexp, ldexp"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #";  The above primitives can be emulated in R5RS, yet they are quite "
 #"handy"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #";  (for portable FP manipulation) and can be executed very efficient"
 #"ly by"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 10 #";  an FPU."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 38 #"; Higher-level parsing and combinators"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; These are combinators that can compose primitives above for more"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 40 #"; complex (possibly iterative) actions. "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 31 #"; - skip-bits, next-u8token,..."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 22 #"; - IIOP, RPC/XDR, RMI"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 43 #"; - binary lexer for existing LR/LL-parsers"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #"; "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 69
(
 #"; The composition of primitives and combinators will represent binar"
 #"y"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 65
#"; parsing language in a _full_ notation. This is similar to XPath"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 61
#"; expressions in full notation. Later we need to find out the"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; most-frequently used patterns of the binary parsing language and"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 64
#"; design an abbreviated notation. The latter will need a special"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 67
(
 #"; \"interpreter\". The abbreviated notation may turn out to look lik"
 #"e"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 29 #"; Olin's regular expressions."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 74
(
 #";;=================================================================="
 #"======"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 21 #"Configuration section"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #";;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 70
(
 #"; Performance is very important for binary parsing. We have to get a"
 #"ll"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 71
(
 #"; help from a particular Scheme system we can get. If a Scheme funct"
 #"ion"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 61
#"; can support the following primitives faster, we should take"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 25 #"; advantage of that fact."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 24 #";; Configuration for PLT"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 4 3 1 #" "
0 0 14 3 2 #"<<"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"arithmetic-shift"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 4 3 1 #" "
0 0 14 3 2 #">>"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"arithmetic-shift"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 4 3 1 #" "
0 0 14 3 3 #"<<1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 16 #"arithmetic-shift"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 4 3 1 #" "
0 0 14 3 3 #">>1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 16 #"arithmetic-shift"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 4 3 1 #" "
0 0 14 3 8 #"bit-set?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 22 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 28 #";; End configuration for PLT"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 50 #"; combine bytes in the MSB order. A byte may be #f"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"combine-two"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 1 #")"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 17 3 33 #"; The result is for sure a fixnum"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"combine-three"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 4 3 1 #" "
0 0 14 3 2 #"b3"
0 0 22 3 1 #")"
0 1 4 65 1 #"\t"
0 0 17 3 33 #"; The result is for sure a fixnum"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 4 3 1 #" "
0 0 14 3 2 #"b3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"b3"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 33 #"; Here the result may be a BIGNUM"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"combine-bytes"
0 0 4 3 1 #" "
0 0 26 3 1 #"."
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"bytes"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 3 #"256"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 9 #")))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #";==================================================================="
 #"====="
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"   Reading a byte "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 54 #"; Read-byte is a fundamental primitive; it needs to be"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 64
#"; added to the standard. Most of the other functions are library"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 70
(
 #"; procedures. The following is an approximation, which clearly doesn"
 #"'t"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 68
#"; hold if the port is a Unicode (especially UTF-8) character stream."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 33 #"; The mzscheme read-byte is used."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#"; Return a byte as an exact integer [0,255], or the EOF object"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-byte"
0 0 4 3 1 #" "
0 0 14 3 4 #"port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-char"
0 0 4 3 1 #" "
0 0 14 3 4 #"port"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"eof-object?"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->integer"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 43 #"; The same as above, but returns #f on EOF."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-byte"
0 0 4 3 1 #" "
0 0 14 3 4 #"port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-byte"
0 0 4 3 1 #" "
0 0 14 3 4 #"port"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"eof-object?"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #";==================================================================="
 #"====="
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 10 #"Bit stream"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 42 #"; -- Function: make-bit-reader BYTE-READER"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 64
#"; Given a BYTE-READER (a thunk), construct and return a function"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 12 #"bit-reader N"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 70
(
 #"; that reads N bits from a byte-stream represented by the BYTE-READE"
 #"R."
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 67
#"; The BYTE-READER is a function that takes no arguments and returns"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 63
#"; the current byte as an exact integer [0-255]. The byte reader"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 26 #"; should return #f on EOF."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#"; The bit reader returns N bits as an exact unsigned integer, "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 75
(
 #"; 0 -... (no limit). N must be a positive integer, otherwise the bit"
 #" reader"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 72
(
 #"; returns #f. There is no upper limit on N -- other than the size of"
 #" the"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #"; input stream itself and the amount of (virtual) memory an OS is wi"
 #"lling"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 70
(
 #"; to give to your process. If you want to read 1M of _bits_, go ahea"
 #"d."
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 69
(
 #"; It is assumed that the bit order is the most-significant bit first"
 #"."
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 70
(
 #"; Note the bit reader keeps the following condition true at all time"
 #"s:"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 51 #"(= current-inport-pos (ceiling (/ no-bits-read 8)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 73
(
 #"; That is, no byte is read until the very moment we really need (som"
 #"e of)"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 56
#"; its bits. The bit reader does _not_ \"byte read ahead\"."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; Therefore, it can be used to handle a concatenation of different"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 74
(
 #"; bit/byte streams *STRICTLY* sequentially, _without_ 'backing up a "
 #"char',"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 31 #"; 'unreading-char' etc. tricks."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; For example, make-bit-reader has been used to read GRIB files of"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 72
(
 #"; meteorological data, which made of several bitstreams with headers"
 #" and"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 7 #"; tags."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 67
#"; Thus careful attention to byte-buffering and optimization are the"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 30 #"; features of this bit reader."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 16 #"; Usage example:"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 60
#"(define bit-reader (make-bit-reader (lambda () #b11000101)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 20 #"(bit-reader 3) ==> 6"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 20 #"(bit-reader 4) ==> 2"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 43 #"; The test driver below is another example."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 25 #"; Notes on the algorithm."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; The function recognizes and handles the following special cases:"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 58
#";  - the buffer is empty and 8, 16, 24 bits are to be read"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 60
#";  - reading all bits which are currently in the byte-buffer"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 26 #";    (and then maybe more)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 25 #";  - reading only one bit"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 72
(
 #"; Since the bit reader is going to be called many times, optimizatio"
 #"n is"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#"; critical. We need all the help from the compiler/interpreter"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 13 #"; we can get."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-bit-reader"
0 0 4 3 1 #" "
0 0 14 3 11 #"byte-reader"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"mask"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 5 #"     "
0 0 17 3 46 #"; mask = 128 means that the buffer is full and"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 17 3 45 #"; the msb bit is the current (yet unread) bit"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 56 #"; read the byte into the buffer and set up the counters."
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 18 #"; return #f on eof"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"set-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 4 3 1 #" "
0 0 20 3 3 #"128"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 20 3 2 #"#t"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 46 #"; Read fewer bits than there are in the buffer"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"read-few-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 17 3 20 #"; all bits in buffer"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"<<1"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 17 3 19 #"; remove extra bits"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 67
#"; read n bits given an empty buffer, and append them to value, n>=8"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"add-more-bits"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"read-n-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 20 3 3 #"256"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 17 #"; The main module"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"read-n-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 35 #"; Check the most common cases first"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"positive?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 1 #")"
0 1 4 65 1 #"\t"
0 0 17 3 25 #"; the bit-buffer is empty"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 4 #"case"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 2 #"(("
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 2 #"(("
0 0 20 3 2 #"16"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 22 3 1 #"("
0 0 14 3 11 #"combine-two"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 2 #"(("
0 0 20 3 2 #"24"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"b2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 22 3 1 #"("
0 0 14 3 13 #"combine-three"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"set-buffer"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"read-few-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 2 #"16"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"set-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"                                     "
0 0 22 3 1 #"("
0 0 14 3 13 #"read-few-bits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-reader"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"add-more-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 9 #")))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 17 3 14 #"; read one bit"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"bit-set?"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #">>1"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 14 3 5 #"value"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 1 #")"
0 1 4 65 1 #"\t"
0 0 17 3 23 #"; will empty the buffer"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"n-rem"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 17 3 27 #"; for mask=64, it'll be &63"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"                                     "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"<<1"
0 0 4 3 1 #" "
0 0 14 3 4 #"mask"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 2 #"(("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 5 #"n-rem"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 2 #"(("
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 14 3 5 #"n-rem"
0 0 4 3 1 #" "
0 0 20 3 2 #"16"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"read-n-bits"
0 0 4 3 1 #" "
0 0 14 3 5 #"n-rem"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 14 3 5 #"n-rem"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"add-more-bits"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 14 3 5 #"n-rem"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"read-few-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 11 #"read-n-bits"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 14 #";;; BIT WRITER"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 42 #"; -- Function: make-bit-writer BYTE-WRITER"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 81
(
 #"; Given a BYTE-WRITER (function of one argument), construct and retu"
 #"rn a function"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 14 #"bit-writer N B"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 79
(
 #"; that writes N bits represented by the integer B to a byte-stream r"
 #"epresented "
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 21 #"; by the BYTE-WRITER."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; The BYTE-WRITER is a function that takes one argument and writes"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 46 #"; the given byte as an exact integer [0-255]. "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 69
(
 #"; It is assumed that the bit order is the most-significant bit first"
 #"."
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 68
#"; Note the bit writer will output bytes as soon as possible. That is"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; the maximum number of waiting bits are 7. Call bit-writer with a"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 52 #"; non-number as argument to flush the remainin bits."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-bit-writer"
0 0 4 3 1 #" "
0 0 14 3 11 #"byte-writer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"empty-buffer!"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"low-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 2 #"15"
0 0 4 3 1 #" "
0 0 20 3 2 #"31"
0 0 4 3 1 #" "
0 0 20 3 2 #"63"
0 0 4 3 1 #" "
0 0 20 3 3 #"127"
0 0 4 3 1 #" "
0 0 20 3 3 #"255"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"extend-buffer!"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"set-buffer!"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"integer-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 6 #"unless"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"integer?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 44 #"\"a non-negative integer was expected, got: \""
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 20 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"integer-length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"arithmetic-shift"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"flush-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 6 #"unless"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-writer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"write-n-bits"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"integer-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"doh!\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 25 #"; (set! b (low-bits n b))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"positive?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 1 #")"
0 1 4 65 1 #"\t"
0 0 17 3 25 #"; the bit-buffer is empty"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 4 #"case"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 2 #"(("
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-writer"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 5 #"     "
0 0 22 3 2 #"(("
0 0 20 3 2 #"16"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-writer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 20 3 18 #"#b1111111100000000"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-writer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 20 3 10 #"#b11111111"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 2 #"(("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 14 3 11 #"byte-writer"
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                        "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #"]"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #"]"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()])"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 46 #"                                              "
0 0 14 3 1 #"l"
0 0 4 29 1 #"\n"
0 0 4 3 46 #"                                              "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 20 3 10 #"#b11111111"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"set-buffer!"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 2 #"16"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-writer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 11 #"set-buffer!"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 20 3 10 #"#b11111111"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 2 #"16"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 14 #"bits-to-buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")])"
0 0 4 3 1 #" "
0 0 17 3 45 #"; output all whole bytes, and buffer the rest"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 12 #"write-n-bits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-to-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-to-buffer"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 11 #"set-buffer!"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-to-buffer"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 43 #"                                           "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-and"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 2 #"15"
0 0 4 3 1 #" "
0 0 20 3 2 #"31"
0 0 4 3 1 #" "
0 0 20 3 2 #"63"
0 0 4 3 1 #" "
0 0 20 3 3 #"127"
0 0 4 3 1 #" "
0 0 20 3 3 #"255"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 10 #"))))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 17 3 31 #"; everything goes to the buffer"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 14 #"extend-buffer!"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 24 #"                        "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 4 3 1 #" "
0 0 14 3 14 #"bits-in-buffer"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 62
#";(display (list buffer bits-in-buffer n) (current-error-port))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 37 #"; (flush-output (current-error-port))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 45 #"; the buffer and the initial bits make a byte"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"byte-writer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-ior"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 13 #"empty-buffer!"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 16 #"; write the rest"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 12 #"write-n-bits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"bitwise-xor"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">>"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"values"
0 0 4 3 1 #" "
0 0 14 3 12 #"write-n-bits"
0 0 4 3 1 #" "
0 0 14 3 12 #"flush-buffer"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 8 #";;; TEST"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"naturals"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 2 #"do"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 58
#"; write the numbers 999 ... 1 to \"tmp\" and read them again"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 19 #"with-output-to-file"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"tmp\""
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 10 #"let-values"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 3 #"([("
0 0 14 3 5 #"write"
0 0 4 3 1 #" "
0 0 14 3 5 #"flush"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-bit-writer"
0 0 4 3 2 #"  "
0 0 14 3 10 #"write-byte"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 5 #"write"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"naturals"
0 0 4 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 5 #"flush"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 1 #"'"
0 0 14 3 7 #"replace"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 20 #"with-input-from-file"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"tmp\""
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-bit-reader"
0 0 4 3 1 #" "
0 0 14 3 9 #"read-byte"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"naturals"
0 0 4 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 14 #";;; PARAMETERS"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 18 #"current-bit-reader"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"make-parameter"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-bit-reader"
0 0 4 3 1 #" "
0 0 14 3 9 #"read-byte"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 13 #"define-values"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 18 #"current-bit-writer"
0 0 4 3 1 #" "
0 0 14 3 19 #"current-bit-flusher"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 10 #"let-values"
0 0 4 3 1 #" "
0 0 22 3 3 #"([("
0 0 14 3 6 #"writer"
0 0 4 3 1 #" "
0 0 14 3 7 #"flusher"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-bit-writer"
0 0 4 3 1 #" "
0 0 14 3 10 #"write-byte"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"values"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"make-parameter"
0 0 4 3 1 #" "
0 0 14 3 6 #"writer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 14 #"make-parameter"
0 0 4 3 1 #" "
0 0 14 3 7 #"flusher"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #")"
0           0
